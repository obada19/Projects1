
    return (
        <button className="square" onClick={onSquareClick}>
        {value}
        </button>
    );
}

function Board({xisNext, squares, onPlay}){


   function handleClick(i){
       if (squares[i] || calculateWinner(squares)){
           return;
       }

       const nextSquares = squares.slice();
       if (xisNext){
           nextSquares[i]="X";
       }else{
           nextSquares[i]="O";
       }


       onPlay(nextSquares)
   }
       const winner = calculateWinner(squares);

     let statusword;
       if (winner){
           statusword= "winner: "+ winner;
       }else{
           statusword = "next player is "+ (xisNext ? "X" : "O");
       }



    return (
        <>
            <div className="statusword">{statusword}</div>
            <div className="board-row">
                <Square value={squares[0]} onSquareClick={() =>handleClick(0)}/>
                <Square value ={squares[1]}onSquareClick={() =>handleClick(1)}/>
                <Square value={squares[2]}onSquareClick={() =>handleClick(2)} />

            </div>
            <div className="board-row">
                <Square value={squares[3]}onSquareClick={() =>handleClick(3)} />
                <Square value={squares[4]}onSquareClick={() =>handleClick(4)} />
                <Square value={squares[5]}onSquareClick={() =>handleClick(5)}/>
            </div>
            <div className="board-row">
                <Square value={squares[6]} onSquareClick={() =>handleClick(6)}/>
                <Square value={squares[7]} onSquareClick={() =>handleClick(7)} />
                <Square value={squares[8]} onSquareClick={() =>handleClick(8)}/>
            </div>

        </>
    )
}
export default function Game(){

    const [history, setHistory]= useState([Array(9).fill(null)])
    const [currentmove, setcurrentmove]= useState(0)
    const currentsquares = history[currentmove];
    const xisNext= currentmove % 2 === 0;
    function handlplay(nextSquares){
        const nextHistory = [...history.slice(0,currentmove+1), nextSquares]
        setHistory(nextHistory);
        setcurrentmove(nextHistory.length-1)

    }

    function tojump(nextmove){
        setcurrentmove(nextmove);

    }
    const moves = history.map((squares, move)=>{
        let description;
        if(move>0){
            description= " go to move #"+ move;

        }else{
            description="go to game start";
        }
        return (<li key={move}>
            <button onClick={()=> tojump(move)}>{description}</button>
        </li>);
        });






    return(
        <div className="game">
        <div className="game-board">
            <Board xisNext={xisNext} squares={currentsquares} onPlay={handlplay} />
        </div>
            <div className="gameInfo">
                {moves}
            </div>
        </div>
    )
}
function calculateWinner(squares){
    const lines = [
        [0, 1, 2],
        [3, 4, 5],
        [6, 7, 8],
        [0, 3, 6],
        [1, 4, 7],
        [2, 5, 8],
        [0, 4, 8],
        [2, 4, 6]
    ];
    for (let i = 0; i<lines.length; i++){
        const [a,b,c]= lines[i];
        if (squares[a]&& squares[a]=== squares[b] && squares[a]===squares[c]){
            return squares[a];
        }
    }
    return null;
}
